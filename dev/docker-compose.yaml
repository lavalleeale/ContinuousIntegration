# Use postgres/example user/password credentials
version: "3.1"

services:
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: development
      POSTGRES_USER: development
      POSTGRES_DB: development
    ports:
      - 5432:5432
    volumes:
      - "db:/var/lib/postgresql/data"
  registry:
    image: registry:2
    ports:
      - 5000:5000
    environment:
      - REGISTRY_AUTH=token
      - REGISTRY_AUTH_TOKEN_REALM=https://auth:8081/auth
      - REGISTRY_AUTH_TOKEN_SERVICE=Authentication
      - REGISTRY_AUTH_TOKEN_ISSUER=Sample Issuer
      - REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE=/mnt/local/certs/auth.crt
      - REGISTRY_HTTP_TLS_CERTIFICATE=/mnt/local/certs/registry.crt
      - REGISTRY_HTTP_TLS_KEY=/mnt/local/certs/registry.key
    volumes:
      - "../services/registry/certs:/mnt/local/certs"
      - "registry:/var/lib/registry"
    restart: always
  registry_auth:
    build:
      context: ..
      dockerfile: Dockerfile.registry
    ports:
      - 8081:8081
    environment:
      DATABASE_URL: postgres://development:development@db:5432/development?sslmode=disable
      JWT_SECRET: development
    volumes:
      - "../services/registry/certs:/app/certs"
  continuous_integration:
    build:
      context: ..
      dockerfile: Dockerfile.ContinuousIntegration
    ports:
      - 8080:8080
    environment:
      DOMAIN: localhost
      JWT_SECRET: development
      DOCKER_HOST: local
      DATABASE_URL: postgres://development:development@db:5432/development?sslmode=disable
      RUNTIME: sysbox-runc
      REGISTRY_HOST: "10.0.1.18"
      REGISTRY_AUTH_HOST: "10.0.1.18"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
volumes:
  registry:
  db:
